#!/usr/bin/env python
# Software License Agreement (BSD)
#
# \file      test_listener_py
# \authors   Paul Bovbel <pbovbel@locusrobotics.com>
# \copyright Copyright (c) (2018,), Locus Robotics, All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions
# and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or other materials provided with
# the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to
# endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import json
import json_transport
import rospy
import rostest
import sys
import threading
import unittest

from functools import partial


class TestListener(unittest.TestCase):

    def __init__(self, *args):
        super(TestListener, self).__init__(*args)

    def callback(self, msg, event):
        self.receive_data = msg.data
        rospy.loginfo("Received {}".format(self.receive_data))
        event.set()

    def test_listen(self):
        receive_event = threading.Event()
        self.sub = rospy.Subscriber(
            'json', json_transport.PackedJson, callback=partial(self.callback, event=receive_event))
        receive_event.wait(5)

        data = json.loads(rospy.get_param("test_data"))

        self.assertEquals(data, self.receive_data)


if __name__ == '__main__':
    rospy.init_node('test_listener_py')
    rostest.rosrun('json_transport', 'test_listener_py', TestListener, sys.argv)
